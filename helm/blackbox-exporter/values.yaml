# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Blackbox Exporter configuration
image:
  registry: quay.io
  repository: prometheus/blackbox-exporter
  tag: "v0.24.0"
  pullPolicy: IfNotPresent

# Service account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Security context
securityContext:
  runAsUser: 65534
  runAsGroup: 65534
  runAsNonRoot: true
  fsGroup: 65534

# Container security context
containerSecurityContext:
  capabilities:
    drop:
    - ALL
    add:
    - NET_RAW  # NÃ©cessaire pour les probes ICMP
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534

# Resources
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi

# Service configuration
service:
  type: ClusterIP
  port: 9115
  targetPort: 9115
  annotations: {}

# Ingress configuration (optionnel pour Blackbox Exporter)
ingress:
  enabled: false
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: local-amazone
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hostname: blackbox.amazone.lan
  tls:
    enabled: true
    secretName: blackbox-exporter-tls

# Blackbox Exporter configuration
blackboxExporter:
  configMapName: blackbox-exporter-config
  config:
    modules:
      http_2xx:
        prober: http
        timeout: 10s
        http:
          method: GET
          valid_http_versions:
            - "HTTP/1.1"
            - "HTTP/2.0"
          valid_status_codes: []
          follow_redirects: true
          preferred_ip_protocol: "ip4"
          fail_if_ssl: false
          fail_if_not_ssl: false
          tls_config:
            insecure_skip_verify: false
      
      http_post_2xx:
        prober: http
        timeout: 10s
        http:
          method: POST
          headers:
            Content-Type: application/json
          body: '{}'
      
      tcp_connect:
        prober: tcp
        timeout: 5s
        tcp:
          preferred_ip_protocol: "ip4"
      
      icmp:
        prober: icmp
        timeout: 5s
        icmp:
          preferred_ip_protocol: "ip4"
      
      dns_udp:
        prober: dns
        timeout: 5s
        dns:
          query_name: "example.com"
          query_type: "A"
          valid_rcodes:
            - NOERROR
          preferred_ip_protocol: "ip4"
      
      ssh_banner:
        prober: tcp
        timeout: 10s
        tcp:
          query_response:
            - expect: "^SSH-2.0-"

# Replica count
replicaCount: 1

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 5
    timeoutSeconds: 5

# Configuration pour les targets de monitoring
monitoring:
  targets:
    http:
      - name: "prometheus"
        url: "https://prometheus.amazone.lan"
        module: "http_2xx"
      - name: "alertmanager"
        url: "https://alertmanager.amazone.lan"
        module: "http_2xx"
    tcp:
      - name: "ssh-server"
        target: "192.168.1.1:22"
        module: "ssh_banner"
    icmp:
      - name: "gateway"
        target: "192.168.1.1"
        module: "icmp"
    dns:
      - name: "local-dns"
        target: "8.8.8.8:53"
        module: "dns_udp"